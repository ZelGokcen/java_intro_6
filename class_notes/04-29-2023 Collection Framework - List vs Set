

03-29-2023 Collection Framework - List vs Set


Collection: group of same data type stored together in a variable

Arrays: works with primitives and reference types. Does not provide many methods compared to other collections and instead it works with indexes in the []. It MUST have an initial size and it cannot be changed be later.

String[] names = new String[3];
Employee[] employees = new Employee[10];
Animal[] animals = new Animal[2];

int[] numbers = new int[5];




List: is an interface
	ArrayList:
	LinkedList:
	Vector:

class implements interface

ArrayList implements List{
	// implement all the abstract methods in the List interface
}

LinkedList implements List, Queue, Dequeue{

}

Vector implements List{

}



ArrayList<Animal> animals1 = new ArrayList<>();
List<Animal> animals2 = new ArrayList<>(); // polymorphism




Collection Framework: is a set of pre-written classes and interfaces that helps us to organize and manipulate groups of objects

By using Java Collections Framework, we can organize our objects in different ways like lists, sets, or maps

The reason we need to use these types that Array is very useful, but it has some restriction
-Fixed size (we cannot add elements or remove)
-It does not have methods to manipulate data




HOW DO WE COMPARE THESE COLLECTIONS?
	- insertion order
	- duplicates
	- null elements (no info-value)
	- memory
	- performance





				When do we use List or Set?

				  my data has duplicates?

			YES 								NO
		    List 								Set
 		Is it synchronized? 				Do we sort?
NO 							YES         YES 				NO
ArrayList or LinkedList		Vector      TreeSet 	HashSet or LinkedHashSet
do we change size too much? 						Do we keep insertion?
YES 			NO 									YES 			NO
LinkedList		ArrayList							LinkedHashSet   HashSet




ArrayList is the most used List implementation. (90 percent)
HashSet is the most used Set implementation. (80 percent)



1. Find closest element that is less than or equal to the given element
    -floor(element) method returns the greatest element in this set less than or equal to the given element, or null if there is no such element.

2. Find closest element that is more than or equal to the given element
    -ceiling(element) method returns the closest element in this set greater than or equal to the given element, or null if there is no such element.

3. Find the greatest element that is less than the given element
    -lower(element) method returns the greatest element in this set less than the given element, or null if there is no such element.

4. Find the smallest element that is more the than given element
    -higher(element) method returns the smallest element in this set more than the given element, or null if there is no such element.



Find closest to 10?


1, 20, 23, 10, 8 		-> 8

1, 7, 10, 13, 20 		-> 7


set.remove(10);

set.ceiling(10) 		-> 20 	13
set.floor(10) 			-> 8 	7

return Math.abs(10 - set.floor(10)) <= Math.abs(10 - set.ceiling(10)) ? set.floor(10) : set.ceiling(10);



MAP


key - value
Countries 	Capitals
France 		Paris
Germany 	Berlin
Italy 		Rome


HashMap<String, String> map = new HashMap<>();

map.put("France", "Paris");


map.get("France"); // Paris



HashMap<String, Integer> map = new HashMap();
map.put("Okan", 25);
map.put("John", 45);


map.get("Okan"); // 25